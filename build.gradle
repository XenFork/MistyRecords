import com.google.gson.Gson

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.code.gson:gson:2.10.1'
    }
}

plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://maven.wispforest.io' }
        maven { url 'https://www.jitpack.io' }
        maven { url 'https://chinawaremc.github.io/maven-repo/' }
        maven { url 'https://raw.githubusercontent.com/baka4n/mvn-repo/master/' }
        maven { url = "https://cursemaven.com" }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://s01.oss.sonatype.org/content/repositories/releases' }
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://maven.fabricmc.net/' }
    }
}

ext {
    Gson gson = new Gson()
    def default_url = "https://xenfork.github.io/all-project-version-selector/default-version.json"

    def reader1 = new URL(default_url).newReader()
    Map def_json = gson.fromJson(reader1, Map.class)
    def_json.forEach {
        k,v ->
            set("$k", v)
    }
    def pre_url = "https://xenfork.github.io/all-project-version-selector/$base_name/"
    def strings = "$base_name,fabric".split(",")

    for (final def s in strings) {
        def url = new URL("$pre_url$s-version.json")
        def reader = url.newReader()
        Map json = gson.fromJson(reader, Map.class)
        json.forEach {
            k, v ->
                set("$k", v)
        }
        reader.close()
    }
}
version = "$misty_records_version-$minecraft_version"
group = maven_group
def targetJavaVersion =
        Integer.parseInt(String.valueOf((sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17)))

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"
    modImplementation "io.wispforest:owo-lib:0.11.0+1.20"
    // only if you plan to use owo-config
    annotationProcessor "io.wispforest:owo-lib:0.11.0+1.20"
    // {@line https://docs.wispforest.io/owo/ui/getting-started/}
    // include this if you don't want force your users to install owo
    // sentinel will warn them and give the option to download it automatically
    include "io.wispforest:owo-sentinel:0.11.0+1.20"
}

processResources {
    filteringCharset charset
    inputs.property "version", version
    inputs.property "minecraft_version", alpha_version
    inputs.property "loader_version", loader_version
    filesMatching("fabric.mod.json") {
        expand "version": version,
                "minecraft_version": alpha_version,
                "loader_version": loader_version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = charset
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.getRelease().set(targetJavaVersion)
    }
}

java {
    if (JavaVersion.current() < JavaVersion.toVersion(targetJavaVersion))
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)

    archivesBaseName = project.name
    withSourcesJar()
}

javadoc {
    failOnError = false
    options.encoding charset
    options.charSet charset
    options.author true
    options.locale 'en_US'
    options.links "https://docs.oracle.com/en/java/javase/$sourceCompatibility/docs/api/"
    options.windowTitle "$archivesBaseName $version Javadoc"
}

jar {
    from("../../LICENSE") {
        rename { "${it}_$archivesBaseName" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name + "-fabric"
            from components.java
        }
    }
    repositories {
        maven {
            url "${file("../../maven-repo")}"
        }

        mavenLocal()
    }
}